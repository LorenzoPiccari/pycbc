#!/usr/bin/env python

# Copyright (C) 2016 Ian W. Harry
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

"""
Workflow generator for a stochastic template bank construction with pycbc_brute_bank. 
...
"""

#imports
import os
import argparse
import logging
import pycbc
import pycbc.version
import pycbc.workflow as wf
from pycbc.workflow.pegasus_workflow import SubWorkflow

# Boiler-plate stuff
__author__  = "Lorenzo Piccari <lorenzo.@ligo.org>"
__version__ = pycbc.version.git_verbose_msg
__date__    = pycbc.version.date
__program__ = "pycbc_make_uberbank_workflow"

##################################
# DEFINE CLASSES FOR EXECUTABLES #
##################################

class BruteBankExecutable(wf.Executable):
    """ Class for running pycbc_brute_bank.
    """
    # This outputs a dax file.
    current_retention_level = wf.Executable.FINAL_RESULT

    def create_node(self, analysis_time, bank_out_file, config_file,
                    out_storage_path, pegasus_base_dir,
                    workflow_name='brute_bank'):
        node = wf.Executable.create_node(self)

        node.add_opt('--output-file', bank_out_file.storage_path)

        node.add_input_opt('--supplement-config-file', config_file)

        node.add_opt('--workflow-name', workflow_name)
        node.add_opt('--storage-path-base', out_storage_path)

        # Intermediate outputs and dax files
        node.new_output_file_opt(analysis_time, '.hdf',
                                 '--intermediate-data-file',
                                 tags=self.tags + ['INTERMEDIATE'])
        node.new_output_file_opt(analysis_time, '.xml',
                                 '--metadata-file',
                                 tags=self.tags + ['METADATA'])
        node.new_output_file_opt(analysis_time, '.dax',
                                 '--dax-file',
                                 tags=self.tags + ['DAX'])
        node.new_output_file_opt(analysis_time, '.map',
                                 '--output-map',
                                 tags=self.tags + ['MAP'])
        return node


##############################################################################
# Argument parsing and setup of workflow                                     #
##############################################################################


# Use the standard workflow command-line parsing routines. Things like a
# configuration file are specified within the "workflow command line group"
# so run this with --help to see what options are added.
_desc = __doc__[1:]
parser = argparse.ArgumentParser(description=_desc)
parser.add_argument('--version', action='version', version=__version__)
parser.add_argument("--output-file", type=str, default=None,
                    help="Specify the output file name. Either a name can be "
                         "provided or a full path to file. Is this is not "
                         "given a filename and location is chosen ")


wf.add_workflow_command_line_group(parser)
wf.add_workflow_settings_cli(parser, include_subdax_opts=True)
args = parser.parse_args()

# Create the workflow object
workflow = wf.Workflow(args)
wf.makedir(args.output_dir)
